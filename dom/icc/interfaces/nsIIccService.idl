/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIDOMDOMRequest;
interface nsIDOMMozIccInfo;
interface nsIDOMWindow;

[scriptable, uuid(7c0ada3d-d8d4-493e-9243-fa3df39855e4)]
interface nsIIccListener : nsISupports
{
  void notifyStkCommand(in DOMString aMessage);
  void notifyStkSessionEnd();
  void notifyCardStateChanged();
  void notifyIccInfoChanged();
};

/**
 * XPCOM component (in the content process) that provides the ICC information.
 */
[scriptable, uuid(83a37b3f-e1c1-48ce-b9b8-da9f80a20fd3)]
interface nsIIccService : nsISupports
{
  // MUST match enum IccCardState in MozIcc.webidl!
  const unsigned long CARD_STATE_UNKNOWN = 0;
  const unsigned long CARD_STATE_READY = 1;
  const unsigned long CARD_STATE_PIN_REQUIRED = 2;
  const unsigned long CARD_STATE_PUK_REQUIRED = 3;
  const unsigned long CARD_STATE_PERMANENT_BLOCKED = 4;
  const unsigned long CARD_STATE_PERSONALIZATION_IN_PROGRESS = 5;
  const unsigned long CARD_STATE_PERSONALIZATION_READY = 6;
  const unsigned long CARD_STATE_NETWORK_LOCKED = 7;
  const unsigned long CARD_STATE_NETWORK_SUBSET_LOCKED = 8;
  const unsigned long CARD_STATE_CORPORATE_LOCKED = 9;
  const unsigned long CARD_STATE_SERVICE_PROVIDER_LOCKED = 10;
  const unsigned long CARD_STATE_SIM_LOCKED = 11;
  const unsigned long CARD_STATE_NETWORK_PUK_REQUIRED = 12;
  const unsigned long CARD_STATE_NETWORK_SUBSET_PUK_REQUIRED = 13;
  const unsigned long CARD_STATE_CORPORATE_PUK_REQUIRED = 14;
  const unsigned long CARD_STATE_SERVICE_PROVIDER_PUK_REQUIRED = 15;
  const unsigned long CARD_STATE_SIM_PUK_REQUIRED = 16;
  const unsigned long CARD_STATE_NETWORK1_LOCKED = 17;
  const unsigned long CARD_STATE_NETWORK2_LOCKED = 18;
  const unsigned long CARD_STATE_HRPD_NETWORK_LOCKED = 19;
  const unsigned long CARD_STATE_RUIM_CORPORATE_LOCKED = 20;
  const unsigned long CARD_STATE_RUIM_SERVICE_PROVIDER_LOCKED = 21;
  const unsigned long CARD_STATE_RUIM_LOCKED = 22;
  const unsigned long CARD_STATE_NETWORK1_PUK_REQUIRED = 23;
  const unsigned long CARD_STATE_NETWORK2_PUK_REQUIRED = 24;
  const unsigned long CARD_STATE_HRPD_NETWORK_PUK_REQUIRED = 25;
  const unsigned long CARD_STATE_RUIM_CORPORATE_PUK_REQUIRED = 26;
  const unsigned long CARD_STATE_RUIM_SERVICE_PROVIDER_PUK_REQUIRED = 27;
  const unsigned long CARD_STATE_RUIM_PUK_REQUIRED = 28;
  const unsigned long CARD_STATE_ILLEGAL = 29;

  const unsigned long CARD_STATE_UNDETECTED = 4294967295; // UINT32_MAX

  const unsigned long MVNO_TYPE_IMSI = 0;
  const unsigned long MVNO_TYPE_SPN = 1;
  const unsigned long MVNO_TYPE_GID = 2;

  // MUST match enum IccContactType in MozIcc.webidl!
  const unsigned long CONTACT_TYPE_ADN = 0;
  const unsigned long CONTACT_TYPE_FDN = 1;
  const unsigned long CONTACT_TYPE_SDN = 2;

  // Union of card lock enum types in MozIcc.webidl
  const unsigned long CARD_LOCK_TYPE_PIN = 0;
  const unsigned long CARD_LOCK_TYPE_PIN2 = 1;
  const unsigned long CARD_LOCK_TYPE_PUK = 2;
  const unsigned long CARD_LOCK_TYPE_PUK2 = 3;
  const unsigned long CARD_LOCK_TYPE_NCK = 4;
  const unsigned long CARD_LOCK_TYPE_NCK1 = 5;
  const unsigned long CARD_LOCK_TYPE_NCK2 = 6;
  const unsigned long CARD_LOCK_TYPE_HNCK = 7;
  const unsigned long CARD_LOCK_TYPE_CCK = 8;
  const unsigned long CARD_LOCK_TYPE_SPCK = 9;
  const unsigned long CARD_LOCK_TYPE_RCCK = 10;
  const unsigned long CARD_LOCK_TYPE_RSPCK = 11;
  const unsigned long CARD_LOCK_TYPE_NCK_PUK = 12;
  const unsigned long CARD_LOCK_TYPE_NCK1_PUK = 13;
  const unsigned long CARD_LOCK_TYPE_NCK2_PUK = 14;
  const unsigned long CARD_LOCK_TYPE_HNCK_PUK = 15;
  const unsigned long CARD_LOCK_TYPE_CCK_PUK = 16;
  const unsigned long CARD_LOCK_TYPE_SPCK_PUK = 17;
  const unsigned long CARD_LOCK_TYPE_RCCK_PUK = 18;
  const unsigned long CARD_LOCK_TYPE_RSPCK_PUK = 19;
  const unsigned long CARD_LOCK_TYPE_FDN = 20;

  /**
   * Called when a content process registers receiving unsolicited messages from
   * RadioInterfaceLayer in the chrome process. Only a content process that has
   * the 'mobileconnection' permission is allowed to register.
   */
  void registerIccMsg(in unsigned long clientId, in nsIIccListener listener);
  void unregisterIccMsg(in unsigned long clientId, in nsIIccListener listener);

  /**
   * UICC Information
   */
  nsIDOMMozIccInfo getIccInfo(in unsigned long clientId);

  /**
   * Card State
   */
  unsigned long getCardState(in unsigned long clientId);

  /**
   * STK interfaces.
   */
  void sendStkResponse(in unsigned long clientId,
                       in nsIDOMWindow window,
                       in jsval command,
                       in jsval response);
  void sendStkMenuSelection(in unsigned long clientId,
                            in nsIDOMWindow window,
                            in unsigned short itemIdentifier,
                            in boolean helpRequested);
  void sendStkTimerExpiration(in unsigned long clientId,
                              in nsIDOMWindow window,
                              in octet timerId,
                              in unsigned long timerValue);
  void sendStkEventDownload(in unsigned long clientId,
                            in nsIDOMWindow window,
                            in jsval event);

  /**
   * Card lock interfaces.
   */
  nsIDOMDOMRequest getCardLockState(in unsigned long clientId,
                                    in nsIDOMWindow window,
                                    in unsigned long lockType,
                                    [optional] in AString aid);
  nsIDOMDOMRequest unlockCardLock(in unsigned long clientId,
                                  in nsIDOMWindow window,
                                  in unsigned long lockType,
                                  in AString password,
                                  in AString newPassword,
                                  [optional] in AString aid);
  nsIDOMDOMRequest enableCardLock(in unsigned long clientId,
                                  in nsIDOMWindow window,
                                  in unsigned long lockType,
                                  in AString password,
                                  in bool enabled,
                                  [optional] in AString aid);
  nsIDOMDOMRequest changeCardLockPassword(in unsigned long clientId,
                                          in nsIDOMWindow window,
                                          in unsigned long lockType,
                                          in AString password,
                                          in AString newPassword,
                                          [optional] in AString aid);
  nsIDOMDOMRequest getCardLockRetryCount(in unsigned long clientId,
                                         in nsIDOMWindow window,
                                         in unsigned long lockType);

  /**
   * Phonebook interfaces.
   */
  nsIDOMDOMRequest readContacts(in unsigned long clientId,
                                in nsIDOMWindow window,
                                in unsigned long contactType);

  nsIDOMDOMRequest updateContact(in unsigned long clientId,
                                 in nsIDOMWindow window,
                                 in unsigned long contactType,
                                 in AString id,
                                 [array, size_is(nameCount)] in wstring names,
                                 in uint32_t nameCount,
                                 [array, size_is(telCount)] in wstring tels,
                                 in uint32_t telCount,
                                 [array, size_is(emailCount)] in wstring emails,
                                 in uint32_t emailCount,
                                 in DOMString pin2);

  /**
   * Secure Card Icc communication channel
   */
  nsIDOMDOMRequest iccOpenChannel(in unsigned long clientId,
                                  in nsIDOMWindow window,
                                  in DOMString aid);

  nsIDOMDOMRequest iccExchangeAPDU(in unsigned long clientId,
                                   in nsIDOMWindow window,
                                   in long channel,
                                   in long cla,
                                   in long command,
                                   in AString path,
                                   in long p1,
                                   in long p2,
                                   in long p3,
                                   in AString data,
                                   in AString data2);

  nsIDOMDOMRequest iccCloseChannel(in unsigned long clientId,
                                   in nsIDOMWindow window,
                                   in long channel);

  /**
   * Helpers
   */
  nsIDOMDOMRequest matchMvno(in unsigned long clientId,
                             in nsIDOMWindow window,
                             in unsigned long mvnoType,
                             in DOMString mvnoData);
};
