/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "EnumHelpers.h"
#include "nsIIccService.h"
#include "nsIRadioInterfaceLayer.h" // For nsIRilCallback

namespace mozilla {
namespace dom {
namespace icc {

#if defined(MOZ_HAVE_CXX11_CONSTEXPR)
#define ASSERT_EQUALITY(webidlType, webidlState, xpidlIface, xpidlState) \
  static_assert(ToXpidlEnum(webidlType::webidlState) == xpidlIface::xpidlState, \
                #webidlType "::" #webidlState " should equal to " #xpidlIface "::" #xpidlState); \
  static_assert(ToWebidlEnum<webidlType>(xpidlIface::xpidlState) == webidlType::webidlState, \
                #xpidlIface "::" #xpidlState " should equal to " #webidlType "::" #webidlState)
#else
#define ASSERT_EQUALITY(webidlType, webidlState, xpidlIface, xpidlState)
#endif

//
// enum IccCardState
//

#define ASSERT_ICC_CARD_STATE_EQUALITY(webidlState, xpidlState) \
  ASSERT_EQUALITY(IccCardState, webidlState, nsIIccService, xpidlState)

ASSERT_ICC_CARD_STATE_EQUALITY(Unknown, CARD_STATE_UNKNOWN);
ASSERT_ICC_CARD_STATE_EQUALITY(Ready, CARD_STATE_READY);
ASSERT_ICC_CARD_STATE_EQUALITY(PinRequired, CARD_STATE_PIN_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(PukRequired, CARD_STATE_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(PermanentBlocked, CARD_STATE_PERMANENT_BLOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(PersonalizationInProgress, CARD_STATE_PERSONALIZATION_IN_PROGRESS);
ASSERT_ICC_CARD_STATE_EQUALITY(PersonalizationReady, CARD_STATE_PERSONALIZATION_READY);
ASSERT_ICC_CARD_STATE_EQUALITY(NetworkLocked, CARD_STATE_NETWORK_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(NetworkSubsetLocked, CARD_STATE_NETWORK_SUBSET_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(CorporateLocked, CARD_STATE_CORPORATE_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(ServiceProviderLocked, CARD_STATE_SERVICE_PROVIDER_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(SimPersonalizationLocked, CARD_STATE_SIM_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(NetworkPukRequired, CARD_STATE_NETWORK_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(NetworkSubsetPukRequired, CARD_STATE_NETWORK_SUBSET_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(CorporatePukRequired, CARD_STATE_CORPORATE_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(ServiceProviderPukRequired, CARD_STATE_SERVICE_PROVIDER_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(SimPersonalizationPukRequired, CARD_STATE_SIM_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(Network1Locked, CARD_STATE_NETWORK1_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(Network2Locked, CARD_STATE_NETWORK2_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(HrpdNetworkLocked, CARD_STATE_HRPD_NETWORK_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(RuimCorporateLocked, CARD_STATE_RUIM_CORPORATE_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(RuimServiceProviderLocked, CARD_STATE_RUIM_SERVICE_PROVIDER_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(RuimPersonalizationLocked, CARD_STATE_RUIM_LOCKED);
ASSERT_ICC_CARD_STATE_EQUALITY(Network1PukRequired, CARD_STATE_NETWORK1_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(Network2PukRequired, CARD_STATE_NETWORK2_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(HrpdNetworkPukRequired, CARD_STATE_HRPD_NETWORK_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(RuimCorporatePukRequired, CARD_STATE_RUIM_CORPORATE_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(RuimServiceProviderPukRequired, CARD_STATE_RUIM_SERVICE_PROVIDER_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(RuimPersonalizationPukRequired, CARD_STATE_RUIM_PUK_REQUIRED);
ASSERT_ICC_CARD_STATE_EQUALITY(Illegal, CARD_STATE_ILLEGAL);

#undef ASSERT_ICC_CARD_STATE_EQUALITY

//
// enum IccContactType
//

#define ASSERT_ICC_CONTACT_TYPE_EQUALITY(webidlState, xpidlState) \
  ASSERT_EQUALITY(IccContactType, webidlState, nsIIccService, xpidlState)

ASSERT_ICC_CONTACT_TYPE_EQUALITY(Adn, CONTACT_TYPE_ADN);
ASSERT_ICC_CONTACT_TYPE_EQUALITY(Fdn, CONTACT_TYPE_FDN);
ASSERT_ICC_CONTACT_TYPE_EQUALITY(Sdn, CONTACT_TYPE_SDN);

#undef ASSERT_ICC_CONTACT_TYPE_EQUALITY

//
// enum IccCardLockType
//

#define ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(webidlState, xpidlState) \
  ASSERT_EQUALITY(IccCardLockType, webidlState, nsIIccService, xpidlState)

ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Pin, CARD_LOCK_TYPE_PIN);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Pin2, CARD_LOCK_TYPE_PIN2);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Puk, CARD_LOCK_TYPE_PUK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Puk2, CARD_LOCK_TYPE_PUK2);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Nck, CARD_LOCK_TYPE_NCK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Nck1, CARD_LOCK_TYPE_NCK1);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Nck2, CARD_LOCK_TYPE_NCK2);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Hnck, CARD_LOCK_TYPE_HNCK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Cck, CARD_LOCK_TYPE_CCK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Spck, CARD_LOCK_TYPE_SPCK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Rcck, CARD_LOCK_TYPE_RCCK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Rspck, CARD_LOCK_TYPE_RSPCK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(NckPuk, CARD_LOCK_TYPE_NCK_PUK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Nck1Puk, CARD_LOCK_TYPE_NCK1_PUK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Nck2Puk, CARD_LOCK_TYPE_NCK2_PUK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(HnckPuk, CARD_LOCK_TYPE_HNCK_PUK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(CckPuk, CARD_LOCK_TYPE_CCK_PUK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(SpckPuk, CARD_LOCK_TYPE_SPCK_PUK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(RcckPuk, CARD_LOCK_TYPE_RCCK_PUK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(RspckPuk, CARD_LOCK_TYPE_RSPCK_PUK);
ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY(Fdn, CARD_LOCK_TYPE_FDN);

#undef ASSERT_ICC_CARD_LOCK_TYPE_EQUALITY

//
// enum IccMvnoType
//

#define ASSERT_ICC_MVNO_TYPE_EQUALITY(webidlState, xpidlState) \
  ASSERT_EQUALITY(IccMvnoType, webidlState, nsIIccService, xpidlState)

ASSERT_ICC_MVNO_TYPE_EQUALITY(Imsi, MVNO_TYPE_IMSI);
ASSERT_ICC_MVNO_TYPE_EQUALITY(Spn, MVNO_TYPE_SPN);
ASSERT_ICC_MVNO_TYPE_EQUALITY(Gid, MVNO_TYPE_GID);

#undef ASSERT_ICC_MVNO_TYPE_EQUALITY

//
// enum IccErrorNames
//

#define ASSERT_ICC_ERROR_NAMES_EQUALITY(webidlState, xpidlState) \
  ASSERT_EQUALITY(IccErrorNames, webidlState, nsIRilCallback, xpidlState)

ASSERT_ICC_ERROR_NAMES_EQUALITY(RadioNotAvailable, ERROR_RADIO_NOT_AVAILABLE);
ASSERT_ICC_ERROR_NAMES_EQUALITY(GenericFailure, ERROR_GENERIC_FAILURE);
ASSERT_ICC_ERROR_NAMES_EQUALITY(IncorrectPassword, ERROR_INCORRECT_PASSWORD);
ASSERT_ICC_ERROR_NAMES_EQUALITY(SimPin2, ERROR_SIM_PIN2);
ASSERT_ICC_ERROR_NAMES_EQUALITY(SimPuk2, ERROR_SIM_PUK2);
ASSERT_ICC_ERROR_NAMES_EQUALITY(RequestNotSupported, ERROR_REQUEST_NOT_SUPPORTED);
ASSERT_ICC_ERROR_NAMES_EQUALITY(Cancelled, ERROR_CANCELLED);
ASSERT_ICC_ERROR_NAMES_EQUALITY(OpNotAllowedDuringVoiceCall, ERROR_OP_NOT_ALLOWED_DURING_VOICE_CALL);
ASSERT_ICC_ERROR_NAMES_EQUALITY(OpNotAllowedBeforeRegToNw, ERROR_OP_NOT_ALLOWED_BEFORE_REG_TO_NW);
ASSERT_ICC_ERROR_NAMES_EQUALITY(SmsSendFailRetry, ERROR_SMS_SEND_FAIL_RETRY);
ASSERT_ICC_ERROR_NAMES_EQUALITY(SimAbsent, ERROR_SIM_ABSENT);
ASSERT_ICC_ERROR_NAMES_EQUALITY(SubscriptionNotAvailable, ERROR_SUBSCRIPTION_NOT_AVAILABLE);
ASSERT_ICC_ERROR_NAMES_EQUALITY(ModeNotSupported, ERROR_MODE_NOT_SUPPORTED);
ASSERT_ICC_ERROR_NAMES_EQUALITY(FdnCheckFailure, ERROR_FDN_CHECK_FAILURE);
ASSERT_ICC_ERROR_NAMES_EQUALITY(IllegalSIMorME, ERROR_ILLEGAL_SIM_OR_ME);
ASSERT_ICC_ERROR_NAMES_EQUALITY(MissingResource, ERROR_MISSING_RESOURCE);
ASSERT_ICC_ERROR_NAMES_EQUALITY(DialModifiedToUssd, ERROR_DIAL_MODIFIED_TO_USSD);
ASSERT_ICC_ERROR_NAMES_EQUALITY(DialModifiedToSs, ERROR_DIAL_MODIFIED_TO_SS);
ASSERT_ICC_ERROR_NAMES_EQUALITY(DialModifiedToDial, ERROR_DIAL_MODIFIED_TO_DIAL);
ASSERT_ICC_ERROR_NAMES_EQUALITY(UssdModifiedToDial, ERROR_USSD_MODIFIED_TO_DIAL);
ASSERT_ICC_ERROR_NAMES_EQUALITY(UssdModifiedToSs, ERROR_USSD_MODIFIED_TO_SS);
ASSERT_ICC_ERROR_NAMES_EQUALITY(UssdModifiedToUssd, ERROR_USSD_MODIFIED_TO_USSD);
ASSERT_ICC_ERROR_NAMES_EQUALITY(SsModifiedToDial, ERROR_SS_MODIFIED_TO_DIAL);
ASSERT_ICC_ERROR_NAMES_EQUALITY(SsModifiedToUssd, ERROR_SS_MODIFIED_TO_USSD);
ASSERT_ICC_ERROR_NAMES_EQUALITY(SsModifiedToSs, ERROR_SS_MODIFIED_TO_SS);
ASSERT_ICC_ERROR_NAMES_EQUALITY(SubscriptionNotSupported, ERROR_SUBSCRIPTION_NOT_SUPPORTED);
ASSERT_ICC_ERROR_NAMES_EQUALITY(InvalidParameter, ERROR_INVALID_PARAMETER);
ASSERT_ICC_ERROR_NAMES_EQUALITY(RejectedByRemote, ERROR_REJECTED_BY_REMOTE);
ASSERT_ICC_ERROR_NAMES_EQUALITY(NoSuchElement, ERROR_NO_SUCH_ELEMENT);
ASSERT_ICC_ERROR_NAMES_EQUALITY(UnsupportedCardLock, ERROR_UNSUPPORTED_CARD_LOCK);

#undef ASSERT_ICC_ERROR_NAMES_EQUALITY

#undef ASSERT_EQUALITY

} // namespace icc
} // namespace dom
} // namespace mozilla
