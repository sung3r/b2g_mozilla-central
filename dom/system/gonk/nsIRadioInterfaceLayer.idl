/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"
#include "nsINetworkManager.idl"

interface nsIDOMMozIccInfo;
interface nsIMobileConnectionInfo;
interface nsIMobileMessageCallback;
interface nsINeighboringCellIdsCallback;
interface nsICellInfoListCallback;

[scriptable, uuid(6e0f45b8-410e-11e3-8c8e-b715b2cd0128)]
interface nsIRilNetworkInterface : nsINetworkInterface
{
  readonly attribute unsigned long serviceId;
  readonly attribute DOMString iccId;

  /* The following attributes are for MMS proxy settings. */
  readonly attribute DOMString mmsc;     // Empty string if not set.
  readonly attribute DOMString mmsProxy; // Empty string if not set.
  readonly attribute long      mmsPort;  // -1 if not set.
};

[scriptable, uuid(0226a2c1-a3b9-416a-92cb-c89e4dad4be0)]
interface nsIRilContext : nsISupports
{
  readonly attribute DOMString cardState;

  readonly attribute DOMString imsi;

  readonly attribute nsIDOMMozIccInfo iccInfo;
};

[scriptable, uuid(1b65079b-579c-47c7-8ac1-b74a1bf1f90c)]
interface nsIRilCallback : nsISupports
{
  const unsigned long SUCCESS = 0;

  const unsigned long ERROR_RADIO_NOT_AVAILABLE = 1;
  const unsigned long ERROR_GENERIC_FAILURE = 2;
  const unsigned long ERROR_INCORRECT_PASSWORD = 3;
  const unsigned long ERROR_SIM_PIN2 = 4;
  const unsigned long ERROR_SIM_PUK2 = 5;
  const unsigned long ERROR_REQUEST_NOT_SUPPORTED = 6;
  const unsigned long ERROR_CANCELLED = 7;
  const unsigned long ERROR_OP_NOT_ALLOWED_DURING_VOICE_CALL = 8;
  const unsigned long ERROR_OP_NOT_ALLOWED_BEFORE_REG_TO_NW = 9;
  const unsigned long ERROR_SMS_SEND_FAIL_RETRY = 10;
  const unsigned long ERROR_SIM_ABSENT = 11;
  const unsigned long ERROR_SUBSCRIPTION_NOT_AVAILABLE = 12;
  const unsigned long ERROR_MODE_NOT_SUPPORTED = 13;
  const unsigned long ERROR_FDN_CHECK_FAILURE = 14;
  const unsigned long ERROR_ILLEGAL_SIM_OR_ME = 15;
  const unsigned long ERROR_MISSING_RESOURCE = 16;
  const unsigned long ERROR_DIAL_MODIFIED_TO_USSD = 17;
  const unsigned long ERROR_DIAL_MODIFIED_TO_SS = 18;
  const unsigned long ERROR_DIAL_MODIFIED_TO_DIAL = 19;
  const unsigned long ERROR_USSD_MODIFIED_TO_DIAL = 20;
  const unsigned long ERROR_USSD_MODIFIED_TO_SS = 21;
  const unsigned long ERROR_USSD_MODIFIED_TO_USSD = 22;
  const unsigned long ERROR_SS_MODIFIED_TO_DIAL = 23;
  const unsigned long ERROR_SS_MODIFIED_TO_USSD = 24;
  const unsigned long ERROR_SS_MODIFIED_TO_SS = 25;
  const unsigned long ERROR_SUBSCRIPTION_NOT_SUPPORTED = 26;
  const unsigned long ERROR_INVALID_PARAMETER = 27;
  const unsigned long ERROR_REJECTED_BY_REMOTE = 28;
  const unsigned long ERROR_NO_SUCH_ELEMENT = 29;
  const unsigned long ERROR_UNSUPPORTED_CARD_LOCK = 30;

  void handleResponse(in unsigned long error);
};

[scriptable, function, uuid(3bc96351-53b0-47a1-a888-c74c64b60f25)]
interface nsIRilSendWorkerMessageCallback : nsISupports
{
  boolean handleResponse(in jsval response);
};

[scriptable, uuid(c13a8890-797b-4557-b92f-6b959f56c1d8)]
interface nsIRadioInterface : nsISupports
{
  readonly attribute nsIRilContext rilContext;

  /**
   * PDP APIs
   */
  void setupDataCallByType(in DOMString apntype);
  void deactivateDataCallByType(in DOMString apntype);
  long getDataCallStateByType(in DOMString apntype);

  void updateRILNetworkInterface();

  /**
   * SMS-related functionality.
   */
  void getSegmentInfoForText(in DOMString text,
                             in nsIMobileMessageCallback request);

  void sendSMS(in DOMString number,
               in DOMString message,
               in boolean silent,
               in nsIMobileMessageCallback request);

  void sendWorkerMessage(in DOMString type,
              [optional] in jsval message,
              [optional] in nsIRilSendWorkerMessageCallback callback);

  void getSmscAddress(in nsIMobileMessageCallback request);

  /**
   * Request neighboring cell ids in GSM/UMTS network.
   */
  void getNeighboringCellIds(in nsINeighboringCellIdsCallback callback);

  /**
   * Request all of the current cell information known to the radio, including
   * neighboring cells.
   */
  void getCellInfoList(in nsICellInfoListCallback callback);
};

[scriptable, uuid(78b65e8c-68e7-4510-9a05-65bba12b283e)]
interface nsIRadioInterfaceLayer : nsISupports
{
  readonly attribute unsigned long numRadioInterfaces;

  nsIRadioInterface getRadioInterface(in unsigned long clientId);

  /**
   * Select a proper client for dialing emergency call.
   *
   * @return clientId or -1 if none of the clients are avaialble.
   */
  unsigned long getClientIdForEmergencyCall();

  void setMicrophoneMuted(in boolean muted);
};
