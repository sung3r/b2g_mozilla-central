/*
 * Generated by gdbus-codegen 2.38.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GDBUSMANAGER_H__
#define __GDBUSMANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.ofono.Manager */

#define OFONO_GDBUS_TYPE_MANAGER (ofono_gdbus_manager_get_type ())
#define OFONO_GDBUS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OFONO_GDBUS_TYPE_MANAGER, OfonoGDBusManager))
#define OFONO_GDBUS_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OFONO_GDBUS_TYPE_MANAGER))
#define OFONO_GDBUS_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), OFONO_GDBUS_TYPE_MANAGER, OfonoGDBusManagerIface))

struct _OfonoGDBusManager;
typedef struct _OfonoGDBusManager OfonoGDBusManager;
typedef struct _OfonoGDBusManagerIface OfonoGDBusManagerIface;

struct _OfonoGDBusManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_modems) (
    OfonoGDBusManager *object,
    GDBusMethodInvocation *invocation);

  void (*modem_added) (
    OfonoGDBusManager *object,
    const gchar *arg_path,
    GVariant *arg_properties);

  void (*modem_removed) (
    OfonoGDBusManager *object,
    const gchar *arg_path);

};

GType ofono_gdbus_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *ofono_gdbus_manager_interface_info (void);
guint ofono_gdbus_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void ofono_gdbus_manager_complete_get_modems (
    OfonoGDBusManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *modems);



/* D-Bus signal emissions functions: */
void ofono_gdbus_manager_emit_modem_added (
    OfonoGDBusManager *object,
    const gchar *arg_path,
    GVariant *arg_properties);

void ofono_gdbus_manager_emit_modem_removed (
    OfonoGDBusManager *object,
    const gchar *arg_path);



/* D-Bus method calls: */
void ofono_gdbus_manager_call_get_modems (
    OfonoGDBusManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ofono_gdbus_manager_call_get_modems_finish (
    OfonoGDBusManager *proxy,
    GVariant **out_modems,
    GAsyncResult *res,
    GError **error);

gboolean ofono_gdbus_manager_call_get_modems_sync (
    OfonoGDBusManager *proxy,
    GVariant **out_modems,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define OFONO_GDBUS_TYPE_MANAGER_PROXY (ofono_gdbus_manager_proxy_get_type ())
#define OFONO_GDBUS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OFONO_GDBUS_TYPE_MANAGER_PROXY, OfonoGDBusManagerProxy))
#define OFONO_GDBUS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OFONO_GDBUS_TYPE_MANAGER_PROXY, OfonoGDBusManagerProxyClass))
#define OFONO_GDBUS_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OFONO_GDBUS_TYPE_MANAGER_PROXY, OfonoGDBusManagerProxyClass))
#define OFONO_GDBUS_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OFONO_GDBUS_TYPE_MANAGER_PROXY))
#define OFONO_GDBUS_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OFONO_GDBUS_TYPE_MANAGER_PROXY))

typedef struct _OfonoGDBusManagerProxy OfonoGDBusManagerProxy;
typedef struct _OfonoGDBusManagerProxyClass OfonoGDBusManagerProxyClass;
typedef struct _OfonoGDBusManagerProxyPrivate OfonoGDBusManagerProxyPrivate;

struct _OfonoGDBusManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OfonoGDBusManagerProxyPrivate *priv;
};

struct _OfonoGDBusManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType ofono_gdbus_manager_proxy_get_type (void) G_GNUC_CONST;

void ofono_gdbus_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OfonoGDBusManager *ofono_gdbus_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OfonoGDBusManager *ofono_gdbus_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void ofono_gdbus_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OfonoGDBusManager *ofono_gdbus_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OfonoGDBusManager *ofono_gdbus_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define OFONO_GDBUS_TYPE_MANAGER_SKELETON (ofono_gdbus_manager_skeleton_get_type ())
#define OFONO_GDBUS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), OFONO_GDBUS_TYPE_MANAGER_SKELETON, OfonoGDBusManagerSkeleton))
#define OFONO_GDBUS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), OFONO_GDBUS_TYPE_MANAGER_SKELETON, OfonoGDBusManagerSkeletonClass))
#define OFONO_GDBUS_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), OFONO_GDBUS_TYPE_MANAGER_SKELETON, OfonoGDBusManagerSkeletonClass))
#define OFONO_GDBUS_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), OFONO_GDBUS_TYPE_MANAGER_SKELETON))
#define OFONO_GDBUS_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), OFONO_GDBUS_TYPE_MANAGER_SKELETON))

typedef struct _OfonoGDBusManagerSkeleton OfonoGDBusManagerSkeleton;
typedef struct _OfonoGDBusManagerSkeletonClass OfonoGDBusManagerSkeletonClass;
typedef struct _OfonoGDBusManagerSkeletonPrivate OfonoGDBusManagerSkeletonPrivate;

struct _OfonoGDBusManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OfonoGDBusManagerSkeletonPrivate *priv;
};

struct _OfonoGDBusManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType ofono_gdbus_manager_skeleton_get_type (void) G_GNUC_CONST;

OfonoGDBusManager *ofono_gdbus_manager_skeleton_new (void);


G_END_DECLS

#endif /* __GDBUSMANAGER_H__ */
